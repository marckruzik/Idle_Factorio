@inherits Game_Component

@using NS_Blazora_Basic 

@code{

    [Parameter] public string background_color { get; set; }
    [Parameter] public string fill_color { get; set; }
    [Parameter] public bool border { get; set; }
    [Parameter] public ObservableProperty<int> val_max { get; set; } = new ObservableProperty<int> ("ProgressBar_val_max", 100);
    [Parameter] public int val_max_coeff { get; set; } = 1;
    [Parameter] public ObservableProperty<int> val_current { get; set; }



}

@{ 
    display_name ();
}


<div class="progressbar_container" style="
    @(from_position_get_style ())
    @(border == true ? "border: 1px solid black;" : "")
    @(background_color != null ? $"background-color: {background_color};" : "")
    ">

    <div class="progressbar_content" style="
        position: absolute;
        height: @($"{this.position.height}px");
        width: @($"{get_content_width ()}px");
        top: 0px;
        left: 0px;
        @(fill_color != null ? $"background-color: {fill_color};" : "")
    ">


    </div>

</div>



@code {


    public override void listener_setup ()
    {
        base.listener_setup ();
        listener_add ("ProgressBar val_current", this.val_current);
        listener_add ("ProgressBar val_max", this.val_max);
    }


    protected override void OnInitialized()
    {
        this.id = $"ProgressBar (w:{this.position.width},h:{this.position.height})";
        base.OnInitialized ();
    }


    public int get_content_width ()
    {
        if (this.val_current == null)
        {
            return 0;
        }
        int val_now = this.val_current.Value;

        int val = val_now;
        if (val < 0)
        {
            val = 0;
        }
        else if (val > this.val_max * this.val_max_coeff)
        {
            val = this.val_max * this.val_max_coeff;
        }

        float percentage = val_now / (float)(this.val_max * this.val_max_coeff);

        float content_width_original = percentage * (this.position.width);
        content_width_original = (float)Math.Ceiling (content_width_original);
        if (content_width_original > this.position.width)
        {
            content_width_original = this.position.width;
        }
        int content_width = (int)content_width_original;

        return content_width;
    }




}
