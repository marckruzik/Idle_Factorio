@inherits BGenerator_Component
@using BlazorApp.Shared.Models
@using NS_Manager_Resource
@using NS_Game_Engine
@using Blazora.Script

@code {

    
}

@{ 
    display_name ();
}


<!-- Source -->

@for (int i = 0; i < this.recipe.get_component_count (); i++)
{
    Resource_Stack component_stack = this.recipe.mix_component.list_resource_stack[i];

    int stock_quantity = Game_Engine.self.manager_resource.from_resource_name_get_resource_quantity (component_stack.resource_name);

    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (component_stack.resource_name))
                position=@(new Position (s * 0, s * i, s, s))
                text_bottom_right=@("inf")
                />
}


@{ 
    Resource_Stack stack_tool = get_stack_tool ();
}


<!-- Line 1 -->
<Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (stack_tool.resource_name))
            position=@(new Position (s*4, s*(this.recipe.get_component_count ()-1), s, s))
            action=@(() => 
                        {
                            Manager_Resource.resource_transfer (
                                Game_Engine.self.manager_resource,
                                this.generator.manager_resource,
                                stack_tool.resource_name, 
                                1);
                        })
            text_bottom_right=@($"{stack_tool.quantity}")
            stack_val_current=@(get_loc_quantity (stack_tool.resource_name))
            stack_val_max=@(get_stack_quantity_max (stack_tool.resource_name))
            parent=this
            />



@code{

    public override void listener_setup ()
    {
        base.listener_setup ();
        listener_add ("tool", get_stack_tool ().observable_quantity);
    }


    
    protected override void OnInitialized ()
    {
        this.id = $"BGenerator_Header_Drill [{get_result_resource_name ()}]";
        base.OnInitialized ();
    }


}