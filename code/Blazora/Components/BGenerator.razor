@inherits BGenerator_Component
@using BlazorApp.Shared.Models
@using NS_Manager_Resource
@using NS_Game_Engine
@using Pages
@using Blazora.script
@using NS_Blazora_Basic


@code{
    
    public ObservableProperty<int> job_percentage = new ObservableProperty<int> ("job_percentage", 0);

}


@{ 
    Console.WriteLine ("generate Blazor " + this.id);

}



@{ 




    int chest_height = (3 + this.recipe.get_component_count ()) * s;

}




<div style="
    width: 256px;
    height: @($"{chest_height}px");
    position: relative;
    ">
    @{ 
        Resource_Stack stack_tool = get_stack_tool ();
    }

    @if (stack_tool.resource_name == "pickaxe")
    {
        <BGenerator_Header_Pickaxe parent=this />
    }
    else if (stack_tool.resource_name == "hand")
    {
        <BGenerator_Header_Hand parent=this />
    }
    else
    {
        <BGenerator_Header_Machine parent=this />
    }


    @{ 
        string result_resource_name = get_result_resource_name ();
    }



    <!-- Line 2 -->

    @{ int start_line = this.recipe.get_component_count () - 1;}

    @{ 
        int stack_resource_quantity_max = Resource.from_resource_name_get_stack_resource_quantity_max (result_resource_name);
    }

    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (result_resource_name))
              position=@(new Position (s*7, s*(start_line+0), s, s))
              action=@(() => 
                       {
                           Console.WriteLine ("chest_upgrade");
                           Game_Action.action_upgrade (this.recipe);
                       })
              val_authorize=@(Game_Action.action_upgrade_is_ready (this.recipe))
              text_top_right=@($"{stack_resource_quantity_max*2}")
              text_middle_right="^"
              text_bottom_right=@($"Lv{stack_resource_quantity_max}")
              stack_val_current=@(get_stock_quantity (result_resource_name))
              stack_val_max=@(get_stock_max (result_resource_name))
              parent=this
            />



    <!-- Line 3 -->

    

    <Chest 
           resource_name=@(result_resource_name)
           position=@(new Position (s*0, s*(start_line+1), s*8, s*1))
           cell_size=s
            parent=this
           />

    
    <!-- Line 4 -->
    <Cellicon picture_filename="chest.png"
            position=@(new Position (s*8, s*0, s, s))
            action=@(action_test)
            />


    <Cellicon picture_filename="time.png"
                position=@(new Position (s*0, s*(start_line+2), s, s))
                action=@(() => Game_Action.from_recipe_craft (this.recipe))
                val_authorize=@(Game_Action.from_recipe_is_craft_ready (this.recipe))
                text_bottom_right=@(get_recipe_time_str ())
                />

    @{ 
        int quarter = s / 4;
    }

    <ProgressBar 
                 position=@(new Position (s*1, s*(start_line+2)+quarter, s*6, s-quarter*2))
                 val_current=this.job_percentage 
                 val_max=@(new ObservableProperty<int> ("ProgressBar_val_max", 100))
                 border=@(true)
                 background_color="lightgrey"
                 fill_color="forestgreen"
                 parent=this
                />


    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (result_resource_name))
                position=@(new Position (s*7, s*(start_line+2), s, s))
                text_top_right=@($"+{get_result_val ()}")
                text_bottom_right=@($"{get_stock_val (result_resource_name)}")
                />


    </div>







@code{



    public void action_test1 ()
    {
        listener_remove ();
        this.recipe.list_tool_kind[0] = Resource.from_resource_name_get_resource ("furnace_stone");
        this.generator.manager_resource.from_recipe_setup (this.recipe);
        this.generator.manager_resource.listener_setup (this.recipe);
        this.need_refresh = true;
        listener_setup ();

        BGenerator_Line_Stock.line_stock.listener_replace ();
    }


    public void action_test2 ()
    {
        self_child_display ();
    }

    public void action_test ()
    {
        //Factorio.listener_stat_display ();

        listener_remove ();
        this.generator.manager_resource.listener_clear ();
        foreach (Game_Component gc in ienumerable_get_child ())
        {
            gc.listener_remove ();
        }

        this.generator.manager_resource.from_recipe_setup (this.recipe);
        this.generator.manager_resource.listener_setup (this.recipe);
        listener_setup ();

        foreach (Game_Component gc in ienumerable_get_child ())
        {
            gc.listener_setup ();
        }

        //Console.WriteLine ("\n\n\n");
        //Factorio.listener_stat_display ();

    }


    protected override void OnInitialized()
    {
        this.id = $"BGenerator [{this.recipe.get_first_result_resource_name ()}]";
        Console.WriteLine ("parameters");
        this.generator.manager_resource.listener_setup (this.generator.recipe);

        base.OnInitialized ();
    }



    public override void listener_setup ()
    {
        base.listener_setup ();

        Console.WriteLine ("listener setup");
        listener_add ("BGenerator tool", get_stack_tool ().observable_quantity);
        listener_add ("BGenerator stock_quantity", get_stock_quantity (get_result_resource_name ()));
        listener_add ("BGenerator stock_max", get_stock_max (get_result_resource_name ()));
        listener_add ("BGenerator stack_max", get_stack_quantity_max (get_result_resource_name ()));
        listener_add (() => Game_Action.from_recipe_get_job_time_percentage (this.recipe) != 0);
        //listener_add (() => this.recipe.list_tool_kind[0].resource_name);

        foreach (string resource_name in this.recipe.mix_component.get_list_resource_name ())
        {
            listener_add ($"BGenerator loc_quantity {resource_name}", get_loc_quantity (resource_name));
            //listener_add (get_stock_quantity (resource_name));
        }


        foreach (ObservableProperty<int> obs in dico_typ_plus_list_observable[typeof(int)])
        {
            Console.WriteLine (obs.id);
        }

        Console.WriteLine ("Manager resource listener");
        this.generator.manager_resource.listener_display ();

    }


    public override void graphical_update ()
    {
        base.graphical_update ();
        job_percentage.Set (Game_Action.from_recipe_get_job_time_percentage (this.recipe));
    }


    public string get_recipe_time_str ()
    {
        int dividor = 60;
        if (this.recipe.time % dividor == 0)
        {
            return $"{this.recipe.time / dividor}";
        }
        else
        {
            float divided = ((float)this.recipe.time) / dividor;
            divided = (float)Math.Round (divided, 1);
            return $"{divided}";
        }
    }




    public override void Dispose ()
    {
        base.Dispose ();
        this.generator.manager_resource.listener_clear ();
    }



}