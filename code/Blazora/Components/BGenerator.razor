@inherits BGenerator_Component
@using BlazorApp.Shared.Models
@using NS_Manager_Resource
@using NS_Game_Engine
@using Pages
@using Blazora.Script
@using NS_Blazora_Basic


@code{
    


}


@{ 
    display_name ();

}



@{ 




    int chest_height = (3 + this.recipe.get_component_count ()) * s;

}




<div style="
    width: 256px;
    height: @($"{chest_height}px");
    position: relative;
    ">
    @{ 
        Resource_Stack stack_tool = get_stack_tool ();
    }

    @if (stack_tool.resource_name == "pickaxe")
    {
        <BGenerator_Header_Pickaxe parent=this />
    }
    else if (stack_tool.resource_name == "burner_drill")
    {
        <BGenerator_Header_Drill parent=this />
    }
    else if (stack_tool.resource_name == "hand" || stack_tool.resource_name == "fire")
    {
        <BGenerator_Header_Hand parent=this />
    }
    else
    {
        <BGenerator_Header_Machine parent=this />
    }


    @{ 
        string result_resource_name = get_result_resource_name ();
    }



    <!-- Line 2 -->

    @{ int start_line = this.recipe.get_component_count () - 1;}

    @{ 
        int stack_resource_quantity_max = Resource.from_resource_name_get_stack_resource_quantity_max (result_resource_name);
    }

    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (result_resource_name))
              position=@(new Position (s*7, s*(start_line+0), s, s))
              action=@(() => 
                       {
                           //Console.WriteLine ("resource upgrade");
                           Game_Action.action_upgrade (this.recipe);
                       })
              val_authorize=@(Game_Action.action_upgrade_is_ready (this.recipe))
              text_top_right=@($"{stack_resource_quantity_max*2}")
              text_middle_right="^"
              text_bottom_right=@($"Lv{stack_resource_quantity_max}")
              stack_val_current=@(get_stock_quantity (result_resource_name))
              stack_val_max=@(get_stock_max (result_resource_name))
              parent=this
            />



    <!-- Line 3 -->

    

    <Chest 
           position=@(new Position (s*0, s*(start_line+1), s*8, s*1))
           parent=this
           />

    
    <!-- Line 4 -->


    <BGenerator_Time_Button 
                            position=@(new Position (s*0, s*(start_line+2), s, s))
                            parent=this
                            />

    @{ 
        int quarter = s / 4;
    }

    <BGenerator_ProgressBar 
                 position=@(new Position (s*1, s*(start_line+2)+quarter, s*6, s-quarter*2))
                 parent=this
                />


    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (result_resource_name))
                position=@(new Position (s*7, s*(start_line+2), s, s))
                text_top_right=@($"+{get_result_val ()}")
                text_bottom_right=@($"{get_stock_val (result_resource_name)}")
                />


    </div>







@code{




    public void action_test ()
    {


    }


    protected override void OnInitialized()
    {
        this.id = $"BGenerator [{this.recipe.get_first_result_resource_name ()}]";
        //Console.WriteLine ("parameters");
        this.generator.manager_resource.listener_setup (this.generator.recipe);

        base.OnInitialized ();
    }



    public override void listener_setup ()
    {
        base.listener_setup ();

        //Console.WriteLine ("listener setup");
        listener_add ("BGenerator tool", get_stack_tool ().observable_quantity);
        listener_add ("BGenerator stock_quantity", get_stock_quantity (get_result_resource_name ()));
        //listener_add ("BGenerator stock_max", get_stock_max (get_result_resource_name ()));
        listener_add ("BGenerator stack_max", get_stack_quantity_max (get_result_resource_name ()));
        //listener_add (() => Game_Action.from_recipe_get_job_time_percentage (this.recipe) != 0);

        foreach (string resource_name in this.recipe.mix_component.get_list_resource_name ())
        {
            //listener_add ($"BGenerator loc_quantity {resource_name}", get_loc_quantity (resource_name));
            //listener_add (get_stock_quantity (resource_name));
        }

    }


    public static BGenerator from_generator_id_get_bgenerator (int generator_id)
    {
        return (BGenerator)Game_Page.list_component
            .Where (gc => gc is BGenerator_Component == true)
            .Cast<BGenerator_Component> ()
            .FirstOrDefault (bgc => bgc.generator_id == generator_id);
    }

    public static List<BGenerator> from_game_page_get_list_bgenerator ()
    {
        return Game_Page.list_component
            .Where (gc => gc is BGenerator == true)
            .Cast<BGenerator> ()
            .ToList ();
    }




    public override void Dispose ()
    {
        base.Dispose ();
        this.generator.manager_resource.listener_clear ();
    }



}