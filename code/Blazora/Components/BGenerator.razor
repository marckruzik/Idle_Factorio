@inherits BGenerator_Component
@using BlazorApp.Shared.Models
@using NS_Manager_Resource
@using NS_Game_Engine
@using Pages



@{ 
    Console.WriteLine ("generate Blazor Generator\n" + this.recipe.get_text ());
    
}



@{ 

    int chest_height = (3 + this.recipe.get_component_count ()) * s;

}




<div style="
    width: 256px;
    height: @(chest_height)px;
    position: relative;
    ">
    @{ 
        Resource_Stack stack_tool = get_stack_tool ();
    }

    @if (stack_tool.resource_name == "pickaxe")
    {
        <Component_Line_Pickaxe />
    }
    else if (stack_tool.resource_name == "hand")
    {
        <Component_Line_Hand />
    }
    else
    {
        <Component_Line_Machine />
    }


    @{ 
        string result_resource_name = get_result_resource_name ();
    }



    <!-- Line 2 -->

    @{ int start_line = this.recipe.get_component_count () - 1;}

    @{ 
        int stack_resource_quantity_max = Resource.from_resource_name_get_stack_resource_quantity_max (result_resource_name);
    }

    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (result_resource_name))
              position=@(new Position (s*7, s*(start_line+0), s, s))
              action=@(() => 
                       {
                           Console.WriteLine ("chest_upgrade");
                           action_upgrade ();
                       })
              action_authorize=action_upgrade_is_ready
              text_top_right=@((stack_resource_quantity_max*2).ToString ())
              text_middle_right="^"
              text_bottom_right=@($"Lv{stack_resource_quantity_max}")
              stack_func_current=@(() => get_stock_val (result_resource_name))
              stack_func_max=@(() => get_stock_max (result_resource_name))
            />



    <!-- Line 3 -->

    

    <Chest 
           resource_name=@(result_resource_name)
           position=@(new Position (s*0, s*(start_line+1), s*8, s*1))
           cell_size=s 
           />

    
    <!-- Line 4 -->

    
    <Cellicon picture_filename="time.png"
                position=@(new Position (s*0, s*(start_line+2), s, s))
                action=craft
                action_authorize=craft_is_ready
                text_bottom_right=@((this.recipe.time / 60).ToString ())
                />

    @{ 
        int quarter = s / 4;
    }

    <ProgressBar 
                 position=@(new Position (s*1, s*(start_line+2)+quarter, s*6, s-quarter*2))
                 val_func="@get_job_time_percentage" 
                 val_max="100"
                 border=@(true)
                 background_color="lightgrey"
                 fill_color="forestgreen"
                />


    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (result_resource_name))
                position=@(new Position (s*7, s*(start_line+2), s, s))
                text_top_right=@($"+{get_result_val ()}")
                text_bottom_right=@(get_stock_val (result_resource_name).ToString ())
                />


    </div>




@code{



    public bool craft_is_ready ()
    {
        if (get_job () != null)
        {
            return false;
        }

        return this.generator.can_craft (Game_Engine.self.manager_resource);
    }


    public void craft ()
    {
        if (craft_is_ready () == false)
        {
            return;
        }

        Resource_Stack resource_stack = Game_Engine.self.manager_resource
            .from_resource_name_get_resource_stack (get_result_resource_name ());
        if (resource_stack.amount_max_reached () == true)
        {
            return;
        }

        Resource_Stack stack_tool = get_stack_tool ();

        this.generator.manager_resource.from_resource_mix_remove_resource (this.recipe.mix_component * stack_tool.quantity);

        Resource_Mix mix_result = this.recipe.mix_result * stack_tool.quantity;

        Action action = delegate ()
        {
            Game_Engine.self.manager_resource.from_resource_mix_add_resource (mix_result);
        };

        Job job = Game_Engine.self.manager_job.from_action_and_time_total_add_job (action, this.recipe.time);
        job.id = get_job_id ();
    }


    public bool action_upgrade_is_ready ()
    {
        string resource_name = get_result_resource_name ();
        int stock_resource_quantity_max = Game_Engine.self.manager_resource.from_resource_name_get_stock_resource_quantity_max (
            resource_name);
        int stock_resource_quantity = Game_Engine.self.manager_resource.from_resource_name_get_resource_quantity (resource_name);
        return (stock_resource_quantity >= stock_resource_quantity_max);
    }


    public void action_upgrade ()
    {
        string resource_name = get_result_resource_name ();
        int stack_resource_quantity_max = Resource.from_resource_name_get_stack_resource_quantity_max (resource_name);
        int stack_resource_quantity_max_future = stack_resource_quantity_max * 2;

        Resource.dico_resource_name_plus_stack_resource_quantity_max[resource_name] =
            stack_resource_quantity_max_future;
        //Game_Engine.self.manager_resource.from_resource_name_and_resource_quantity_set_resource_quantity (
        //    stack_result.resource_name, stack_resource_quantity_max_future);
    }



    public string get_job_id ()
    {
        return this.recipe.get_text ();
    }


    public Job get_job ()
    {
        string job_id = get_job_id ();
        Job job = Game_Engine.self.manager_job.from_job_id_find_job (job_id);

        return job;
    }


    public int get_job_time_percentage ()
    {
        Job job = get_job ();
        if (job == null)
        {
            return 0;
        }

        float percentage_done = job.get_percentage_done ();
        int perc = (int)(percentage_done*100);

        return perc;
    }




    public override void listener_setup ()
    {
        base.listener_setup ();
        listener_add (() => get_stack_tool ().quantity);
        listener_add (() => craft_is_ready ().ToString ());
        listener_add (() => get_stock_val (get_result_resource_name ()));
    }



}