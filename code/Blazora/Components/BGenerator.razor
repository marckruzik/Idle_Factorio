@inherits BGenerator_Component
@using BlazorApp.Shared.Models
@using NS_Manager_Resource
@using NS_Game_Engine
@using Pages
@using Blazora.script
 

@{ 
    Console.WriteLine ("generate Blazor Generator\n" + this.recipe.get_text ());
    
}



@{ 

    int chest_height = (3 + this.recipe.get_component_count ()) * s;

}




<div style="
    width: 256px;
    height: @($"{chest_height}px");
    position: relative;
    ">
    @{ 
        Resource_Stack stack_tool = get_stack_tool ();
    }

    @if (stack_tool.resource_name == "pickaxe")
    {
        <BGenerator_Header_Pickaxe />
    }
    else if (stack_tool.resource_name == "hand")
    {
        <BGenerator_Header_Hand />
    }
    else
    {
        <BGenerator_Header_Machine />
    }


    @{ 
        string result_resource_name = get_result_resource_name ();
    }



    <!-- Line 2 -->

    @{ int start_line = this.recipe.get_component_count () - 1;}

    @{ 
        int stack_resource_quantity_max = Resource.from_resource_name_get_stack_resource_quantity_max (result_resource_name);
    }

    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (result_resource_name))
              position=@(new Position (s*7, s*(start_line+0), s, s))
              action=@(() => 
                       {
                           Console.WriteLine ("chest_upgrade");
                           action_upgrade ();
                       })
              action_authorize=action_upgrade_is_ready
              text_top_right=@($"{stack_resource_quantity_max*2}")
              text_middle_right="^"
              text_bottom_right=@($"Lv{stack_resource_quantity_max}")
              stack_func_current=@(() => get_stock_val (result_resource_name))
              stack_func_max=@(() => get_stock_max (result_resource_name))
            />



    <!-- Line 3 -->

    

    <Chest 
           resource_name=@(result_resource_name)
           position=@(new Position (s*0, s*(start_line+1), s*8, s*1))
           cell_size=s 
           />

    
    <!-- Line 4 -->

    
    <Cellicon picture_filename="time.png"
                position=@(new Position (s*0, s*(start_line+2), s, s))
                action=@(() => Game_Action.from_recipe_craft (this.recipe))
                action_authorize=@(() => Game_Action.from_recipe_is_craft_ready (this.recipe))
                text_bottom_right=@($"{this.recipe.time / 60}")
                />

    @{ 
        int quarter = s / 4;
    }

    <ProgressBar 
                 position=@(new Position (s*1, s*(start_line+2)+quarter, s*6, s-quarter*2))
                 val_func=@(() => Game_Action.from_recipe_get_job_time_percentage (this.recipe)) 
                 val_max="100"
                 border=@(true)
                 background_color="lightgrey"
                 fill_color="forestgreen"
                />


    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (result_resource_name))
                position=@(new Position (s*7, s*(start_line+2), s, s))
                text_top_right=@($"+{get_result_val ()}")
                text_bottom_right=@($"{get_stock_val (result_resource_name)}")
                />


    </div>




@code{



    public override void listener_setup ()
    {
        base.listener_setup ();
        listener_add (() => get_stack_tool ().quantity);
        listener_add (() => Game_Action.from_recipe_is_craft_ready (this.recipe));
        listener_add (() => get_stock_val (get_result_resource_name ()));
        listener_add (() => get_stack_max (get_result_resource_name ()));
    }





    public bool action_upgrade_is_ready ()
    {
        string resource_name = get_result_resource_name ();
        int stock_resource_quantity_max = Game_Engine.self.manager_resource.from_resource_name_get_stock_resource_quantity_max (
            resource_name);
        int stock_resource_quantity = Game_Engine.self.manager_resource.from_resource_name_get_resource_quantity (resource_name);
        return (stock_resource_quantity >= stock_resource_quantity_max);
    }


    public void action_upgrade ()
    {
        string resource_name = get_result_resource_name ();
        int stack_resource_quantity_max = Resource.from_resource_name_get_stack_resource_quantity_max (resource_name);
        int stack_resource_quantity_max_future = stack_resource_quantity_max * 2;

        Resource.dico_resource_name_plus_stack_resource_quantity_max[resource_name] =
            stack_resource_quantity_max_future;
    }







}