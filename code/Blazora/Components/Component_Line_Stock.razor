@inherits BGenerator_Component
@using BlazorApp.Shared.Models
@using NS_Manager_Resource
@using NS_Game_Engine

@using Pages

@{ 
    Console.WriteLine ("generate Blazor Line Stock\n" + this.recipe.get_text ());
}

@for (int i = 0; i < this.recipe.get_component_count (); i++)
{
    Resource_Stack component_stack = this.recipe.mix_component.list_resource_stack[i];

    string resource_name = component_stack.resource_name;

    // Global stock
    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (component_stack.resource_name))
                position=@(new Position (s * 0, s * i, s, s))
                text_bottom_right=@(get_stock_val (resource_name).ToString ())
                />

    
    //int max_indicator = Math.Max (get_stack_max (resource_name), get_loc_min (resource_name));
   

    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (component_stack.resource_name))
                position=@(new Position (s * 3, s * i, s, s))
                action=@(() =>
                         {
                             Console.WriteLine ($"{component_stack.resource_name}_in_tool_kind");
                             Manager_Resource.resource_transfer (
                                 Game_Engine.self.manager_resource,
                                 this.generator.manager_resource,
                                 component_stack.resource_name,
                                 1);
                         })
                action_authorize=@(() => action_ready (resource_name))
                text_bottom_right=@($"{get_loc_val (resource_name)}/{get_loc_min (resource_name)}")
                stack_func_current=@(() => get_loc_val (resource_name))
                stack_func_max=@(() => get_stack_max (resource_name))
                />

}


@{



}


@code{

    public bool action_ready (string resource_name)
    {
        if (get_stock_val (resource_name) == 0)
        {
            return false;
        }

        if (get_loc_val (resource_name) == get_stack_max (resource_name) &&
            get_stack_max (resource_name) < get_loc_min (resource_name))
        {
            return false;
        }

        return true;
    }

    public override void listener_setup ()
    {
        base.listener_setup ();

        List<string> list_resource_name = this.recipe.mix_component.list_resource_stack
            .Select (resource_stack => resource_stack.resource_name)
            .ToList ();

        foreach (string resource_name in list_resource_name)
        {
            listener_add (() => get_loc_val (resource_name));
            listener_add (() => get_loc_min (resource_name));
            listener_add (() => get_stock_val (resource_name));
        }

        listener_add (() => get_tool_val ());
    }



}

