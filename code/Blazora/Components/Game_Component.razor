@using BlazorApp.Shared.Models
@using NS_Game_Engine
@implements IDisposable
@using Blazora.Pages
@using NS_Blazora_Basic
@using script


@code{
    
    [Parameter] public Position position { get; set; }
    [Parameter] public Game_Component parent { get; set; }


    Manager_Listener manager_listener = new Manager_Listener ();
    
    public bool need_refresh = true;

    public string id = "GC_Unknown";

    public List<Game_Component> list_child = new List<Game_Component> ();
}





@code {


    public string from_position_get_style ()
    {
        return $"position: absolute;" +
                $"{(position != null ? $"left: {position.x}px" : "")};" +
                $"{(position != null ? $"top: {position.y}px" : "")};" +
                $"{(position != null ? $"width: {position.width}px" : "")};" +
                $"{(position != null ? $"height: {position.height}px" : "")};";
    }


    protected override void OnInitialized ()
    {
        base.OnInitialized ();
        listener_remove ();
        listener_setup ();
        Game_Page.list_component.Remove (this);
        Game_Page.list_component.Add (this);
        if (this.parent != null)
        {
            this.parent.list_child.Add (this);
            this.parent = null;
        }
    }



    public virtual void graphical_update ()
    {
        listener_update ();

        if (this.need_refresh == false)
        {
            return;
        }

        StateHasChanged ();
        this.need_refresh = false;
    }


    public void self_child_display ()
    {
        Console.WriteLine (this.id);
        foreach (Game_Component gc in ienumerable_get_child ())
        {
            Console.WriteLine (gc.id);
        }
    }

    public void display_name ()
    {
        Console.WriteLine ("generate Blazor " + this.id);
    }


    public IEnumerable<Game_Component> ienumerable_get_child ()
    {
        foreach (Game_Component gc in this.list_child)
        {
            yield return gc;
            foreach (Game_Component g in gc.ienumerable_get_child ())
            {
                yield return g;
            }
        }

    }


    public virtual void listener_setup ()
    {
        listener_remove ();
    }





    private List<IListener_Data> list_listener_data = new List<IListener_Data> ();

    public void listener_add<T> (string info, ObservableProperty<T> observable)
    {
        listener_add (info, observable, refresh);
    }


    public void listener_add<T> (string info, ObservableProperty<T> observable, Action<T> action)
    {
        if (observable == null)
        {
            return;
        }
        observable.changed += action;

        //Console.WriteLine ($"Listener for Game_Component {this.id} with [{observable.id}]{info} (total listener: {observable.get_listener_count ()})");

        this.list_listener_data.Add (new Listener_Data<T> (typeof(T), observable, action));
    }


    public virtual void refresh<T> (T val)
    {
        this.need_refresh = true;
    }


    public void listener_add<T> (Func<T> func)
    {
        this.manager_listener.add (func);
    }

    public void listener_update ()
    {
        bool need_update = this.manager_listener.need_update ();
        if (need_update == true)
        {
            this.need_refresh = true;
        }
    }

    public void listener_remove ()
    {
        listener_remove<int> ();
        listener_remove<string> ();
        listener_remove<bool> ();
        this.list_listener_data.Clear ();


        this.manager_listener.clear ();
    }


    public void listener_remove<T> ()
    {
        foreach (IListener_Data listener_data in this.list_listener_data)
        {
            if (listener_data.typ != typeof (T))
            {
                continue;
            }
            Listener_Data<T> li = listener_data as Listener_Data<T>;
            li.observable.changed -= li.action;
        }
    }





    public void listener_replace ()
    {
        listener_remove ();
        listener_setup ();
    }



    public void state_change ()
    {
        StateHasChanged ();
    }


    public virtual void Dispose ()
    {
        Game_Page.list_component.Remove (this);
        listener_remove ();
    }
}
