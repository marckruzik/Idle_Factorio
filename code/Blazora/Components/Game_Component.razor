@using BlazorApp.Shared.Models
@using NS_Game_Engine
@implements IDisposable
@using Blazora.Pages
@using NS_Blazora_Basic

@code{
    
    [Parameter] public Position position { get; set; }


    Manager_Listener manager_listener = new Manager_Listener ();
    
    public bool need_refresh = true;

}




@code {


    public string from_position_get_style ()
    {
        return $"position: absolute;" +
                $"{(position != null ? $"left: {position.x}px" : "")};" +
                $"{(position != null ? $"top: {position.y}px" : "")};" +
                $"{(position != null ? $"width: {position.width}px" : "")};" +
                $"{(position != null ? $"height: {position.height}px" : "")};";
    }


    protected override void OnInitialized()
    {
        base.OnInitialized ();
        listener_setup ();
        Game_Page.list_component.Add (this);
    }



    public virtual void graphical_update ()
    {
        listener_update ();

        if (this.need_refresh == false)
        {
            return;
        }

        StateHasChanged ();
        this.need_refresh = false;
    }


    public virtual void listener_setup ()
    {

    }


    public void listener_add<T> (ObservableProperty<T> observable)
    {
        if (observable == null)
        {
            return;
        }
        observable.changed += (v) => { this.need_refresh = true; };
    }


    public void listener_add<T> (Func<T> func)
    {
        this.manager_listener.add (func);
    }

    public void listener_update ()
    {
        bool need_update = this.manager_listener.need_update ();
        if (need_update == true)
        {
            this.need_refresh = true;
        }
    }



    public virtual void Dispose ()
    {
        Game_Page.list_component.Remove (this);
    }
}
