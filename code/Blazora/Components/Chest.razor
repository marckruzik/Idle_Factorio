@inherits Game_Component
@using BlazorApp.Shared.Models
@using NS_Game_Engine
@using NS_Manager_Resource

@code{

    [Parameter] public int cell_size { get; set; }
    [Parameter] public int val { get; set; }
    [Parameter] public string item_id { get; set; }
    [Parameter] public string resource_name { get; set; }

    private Cellicon[] arr_cellicon { get; set; } = new Cellicon[Resource.chest_size];


}

<style>

</style>

@{ 
    Console.WriteLine ("generate Blazor Chest");
}


<div class="chest" style="
    position: absolute;
    @(position != null ? $"left: {position.x}px" : "");
    @(position != null ? $"top: {position.y}px" : "");
    @(position != null ? $"width: {position.width}px" : "");
    @(position != null ? $"height: {position.height}px" : "");
    ">

    @{ 
    }

    @for (int i = 0; i < arr_cellicon.Length; i++)
    {
        int x = i % 8;
        int y = i / 8;

        var i2 = i;

        <Cellicon 
                  @ref="arr_cellicon[i2]"
                  picture_filename=@(get_picture_filename(i))
                  position=@(new Position (this.cell_size * x, this.cell_size * y, this.cell_size, this.cell_size))
                  text_bottom_right=@(get_val_str(i))
                  background_color_default="#B2B1B1"
                  border=true
                  />

    }


    @{ 

    }





</div>



@code {




    public override void graphical_update ()
    {
        base.graphical_update ();

        for(int i=0; i<arr_cellicon.Length; i++)
        {
            Cellicon r = arr_cellicon[i];
            int val = get_val (i);
            set_val (r, val);
        }
    }




    public void set_val(Cellicon r, int val)
    {
        if (val > 0)
        {
            r.text_bottom_right = $"{val}";
            r.picture_filename = Resource.from_resource_name_get_resource_filename (this.resource_name);
        }
        else
        {
            r.text_bottom_right = "";
            r.picture_filename = null;
        }

    }


    public int get_val (int number)
    {
        int resource_total = Game_Engine.self.manager_resource.from_resource_name_get_resource_quantity (this.resource_name);
        int pack_max = Resource.from_resource_name_get_stack_resource_quantity_max (this.resource_name);

        int resource_previous = pack_max * number;

        int resource_amount = resource_total - resource_previous;
        if (resource_amount < 0)
        {
            return 0;
        }
        int resource_current = Math.Min (resource_amount, pack_max);

        return resource_current;
    }


    public string get_picture_filename(int number)
    {
        int val = get_val (number);
        if (val > 0)
        {
            return Resource.from_resource_name_get_resource_filename (this.resource_name);
        }
        else
        {
            return null;
        }
    }


    public string get_val_str (int number)
    {
        int val = get_val (number);
        if (val > 0)
        {
            return val.ToString ();
        }
        else
        {
            return "";
        }
    }

}
