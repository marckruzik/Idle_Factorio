@inherits BGenerator_Component
@using BlazorApp.Shared.Models
@using NS_Game_Engine
@using NS_Manager_Resource

@code{

    [Parameter] public int cell_size { get; set; }
    [Parameter] public int val { get; set; }
    [Parameter] public string resource_name { get; set; }

    private Cellicon[] arr_cellicon { get; set; } = new Cellicon[Resource.chest_size];



}



@{ 
    Console.WriteLine ("generate Blazor Chest");
}


<div class="chest" style="@(from_position_get_style ())">

    @{ 
    }

    @for (int i = 0; i < arr_cellicon.Length; i++)
    {
        int x = i % 8;
        int y = i / 8;

        var i2 = i;
        
        int val = get_val (i);

        <Cellicon 
                  picture_filename=@(from_val_get_picture_filename (val))
                  @ref="arr_cellicon[i2]"
                  position=@(new Position (this.cell_size * x, this.cell_size * y, this.cell_size, this.cell_size))
                  background_color_default="#B2B1B1"
                  border=true
                  text_bottom_right=@(from_val_get_text_bottom_right (val))
                  />

    }


    @{ 

    }





</div>



@code {


    public override void listener_setup ()
    {
        base.listener_setup ();
        listener_add (get_stock_quantity (this.resource_name));
        listener_add (get_stack_quantity_max (this.resource_name));
    }





    public string from_val_get_text_bottom_right (int val)
    {
        if (val > 0)
        {
            return $"{val}";
        }
        else
        {
            return "";
        }
    }

    public string from_val_get_picture_filename (int val)
    {
        if (val > 0)
        {
            return Resource.from_resource_name_get_resource_filename (this.resource_name);
        }
        else
        {
            return null;
        }
    }


    public int get_val (int number)
    {
        int resource_total = Game_Engine.self.manager_resource.from_resource_name_get_resource_quantity (this.resource_name);
        int stack_max = Resource.from_resource_name_get_stack_resource_quantity_max (this.resource_name);

        int resource_previous = stack_max * number;

        int resource_amount = resource_total - resource_previous;
        if (resource_amount < 0)
        {
            return 0;
        }
        int resource_current = Math.Min (resource_amount, stack_max);

        return resource_current;
    }




}
