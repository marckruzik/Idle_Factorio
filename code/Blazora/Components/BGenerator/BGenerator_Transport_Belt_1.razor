@inherits BGenerator_Accessory
@using BlazorApp.Shared.Models
@using NS_Manager_Resource
@using NS_Game_Engine
@using Pages
@using Blazora.Script
@using NS_Blazora_Basic

@code {

    public ObservableProperty<int> job_percentage = new ObservableProperty<int> ("job_percentage", 0);

    public int stack_max = 32;

}

@{ 
    display_name ();
}



@{ 
    job_update ();
}


@{ 
    Resource_Stack stack_tool = get_stack_tool (get_complex_resource_name ());
}

<Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (this.main_resource_name))
            position=@(this.position)
            action=@(() => increment ())
            text_bottom_right=@($"{stack_tool.quantity}")
            stack_val_current=@(stack_tool.observable_quantity)
            stack_val_max=@(new ObservableProperty<int> (this.stack_max))
            />


@{
    Position pb_position = new Position (this.position.x, this.position.y, s, 8);
}

<div style="pointer-events: none;">
    <ProgressBar 
            position=@(pb_position)
            val_current=this.job_percentage 
            val_max=@(new ObservableProperty<int> ("ProgressBar_val_max", 100))
            border=@(true)
            background_color="rgba(211, 211, 211, 0.50)"
            fill_color="rgba(0, 255, 0, 0.75)"
            parent=this
            />
</div>




@code{


    public override void listener_setup ()
    {
        base.listener_setup ();
        listener_add ("BGenerator_Transport_Belt_1 clock_second", Game_Page.self.clock_second);
    }


    public override void graphical_update ()
    {
        base.graphical_update ();
    }


    public void job_update ()
    {
        if (get_stack_tool (get_complex_resource_name ()).quantity > 0)
        {
            job_percentage.Set ((get_job_time_percentage () / 10) * 10);
        }
    }


    int previous_tim = 0;
    public int get_job_time_percentage ()
    {
        float perc = Math.Min (16, get_stack_tool (get_complex_resource_name ()).quantity) / 16.0f;

        int time = (int)(1000 + (1 - BezierBlend (perc)) * 5000);
        int current = (int)((Game_Engine.self.clock * 16) % time);
        int tim = (current*100) / time;
        if (tim < previous_tim)
        {
            ((BGenerator_Line_Stock)this.memorized_parent).give_resource (this.secondary_resource_name, false);
        }
        previous_tim = tim;
        return tim;
    }


    float BezierBlend (float t)
    {
        return t * t * (3.0f - 2.0f * t);
    }



    public override void increment ()
    {
        if (get_stack_tool (get_complex_resource_name ()).quantity >= this.stack_max)
        {
            return;
        }
        base.increment ();
    }



}