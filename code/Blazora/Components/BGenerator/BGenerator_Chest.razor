@inherits BGenerator_Component
@using BlazorApp.Shared.Models
@using NS_Game_Engine
@using NS_Manager_Resource

@code{


    private Cellicon[] arr_cellicon { get; set; } = new Cellicon[Resource.chest_size];



}



@{ 
    display_name ();
}


<div class="chest" style="@(from_position_get_style ())">

    @{ 

    }

    <Cellicon 
                picture_filename=@(Resource.from_resource_name_get_resource_filename (get_result_resource_name ()))
                position=@(new Position (s * -1, s * 0, s, s))
                />


    @for (int i = 0; i < this.arr_cellicon.Length; i++)
    {
        int x = i % 8;
        int y = i / 8;

        var i2 = i;
        
        int val = get_val (i);

        <Cellicon 
                  picture_filename=@(from_val_get_picture_filename (val))
                  @ref="arr_cellicon[i2]"
                  position=@(new Position (s * x, s * y, s, s))
                  background_color_default="#B2B1B1"
                  border=true
                  text_bottom_right=@(from_val_get_text_bottom_right (val))
                  />

    }


    @{ 

    }





</div>



@code {


    protected override void OnInitialized()
    {
        this.id = $"BGenerator_Chest [{this.recipe.get_first_result_resource_name ()}]";
        base.OnInitialized ();
    }


    public override void listener_setup ()
    {
        base.listener_setup ();
        listener_add ("BGenerator_Chest stock_quantity", get_stock_quantity (get_result_resource_name ()));
        listener_add ("BGenerator_Chest stack_max", get_stack_quantity_max (get_result_resource_name ()));
    }


    public override void set_need_refresh<T> (T refresh_val)
    {
        base.set_need_refresh (refresh_val);
        this.need_refresh = false;
        for (int i = 0; i < this.arr_cellicon.Length; i++)
        {
            int val = get_val (i);
            string picture_filename_updated = from_val_get_picture_filename (val);
            string text_bottom_right_updated = from_val_get_text_bottom_right (val);

            if (this.arr_cellicon[i].picture_filename != picture_filename_updated)
            {
                this.arr_cellicon[i].picture_filename = picture_filename_updated;
                this.arr_cellicon[i].set_need_refresh ();
            }
            if (this.arr_cellicon[i].text_bottom_right != text_bottom_right_updated)
            {
                this.arr_cellicon[i].text_bottom_right = text_bottom_right_updated;
                this.arr_cellicon[i].set_need_refresh ();
            }
        }
    }


    public string from_val_get_text_bottom_right (int val)
    {
        if (val > 0)
        {
            return $"{val}";
        }
        else
        {
            return "";
        }
    }


    public string from_val_get_picture_filename (int val)
    {
        if (val > 0)
        {
            return Resource.from_resource_name_get_resource_filename (get_result_resource_name ());
        }
        else
        {
            return null;
        }
    }


    public int get_val (int number)
    {
        int resource_total = Game_Engine.self.manager_resource.from_resource_name_get_resource_quantity (get_result_resource_name ());
        int stack_max = Resource.from_resource_name_get_stack_resource_quantity_max (get_result_resource_name ());

        int resource_previous = stack_max * number;

        int resource_amount = resource_total - resource_previous;
        if (resource_amount < 0)
        {
            return 0;
        }
        int resource_current = Math.Min (resource_amount, stack_max);

        return resource_current;
    }




}
