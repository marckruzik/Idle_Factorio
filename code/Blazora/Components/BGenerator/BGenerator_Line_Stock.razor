@inherits BGenerator_Component
@using BlazorApp.Shared.Models
@using NS_Manager_Resource
@using NS_Game_Engine
@using Blazora.Script


@using Pages

@code{


}



@{ 
    display_name ();
}



@for (int i = 0; i < this.recipe.get_component_count (); i++)
{
    Resource_Stack component_stack = this.recipe.mix_component.list_resource_stack[i];

    string resource_name = component_stack.resource_name;

    // Global stock
    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (resource_name))
                position=@(new Position (s * 0, s * i, s, s))
                text_bottom_right=@($"{get_stock_val (resource_name)}")
                />


    List<(int, string)> list_tup = new List<(int, string)> ()
    {
        (1, "transport_belt_1"),
        (2, "inserter_1"),
    };

    foreach ((int, string) tup in list_tup)
    {
        int x = tup.Item1;
        string tool_resource_name = tup.Item2;

        if (Game_Engine.self.manager_toggle.is_true ($"know_{tool_resource_name}") == true)
        {
            string local_toggle_id = this.generator.get_toggle_id_know (tool_resource_name);
            if (Game_Engine.self.manager_toggle.is_true (local_toggle_id) == false)
            {
            <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (tool_resource_name))
                position=@(new Position (s * x, s * i, s, s))
                text_middle_right="^"
                action=@(() => Game_Action.upgrade_accessory (this.generator_id, local_toggle_id))
                />
            }
            else
            {
            <BGenerator_Transport_Belt_1 
                position=@(new Position (s * x, s * i, s, s))
                main_resource_name=@(tool_resource_name)
                secondary_resource_name=@(resource_name)
                parent=this
                />
            }
        }
    }



    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (resource_name))
                position=@(new Position (s * 3, s * i, s, s))
                action=@(() =>
                         {
                             Console.WriteLine ($"{resource_name}_in_tool_kind");
                             give_resource (resource_name);
                         })
                val_authorize=@(action_ready (resource_name))
                text_bottom_right=@($"{get_loc_val (resource_name)}/{get_loc_min (resource_name)}")
                stack_val_current=@(get_loc_quantity (resource_name))
                stack_val_max=@(get_stack_quantity_max (resource_name))
                parent=this
              />

}


@{



}


@code{


    protected override void OnInitialized ()
    {
        this.id = $"Line_Stock [{this.recipe.get_first_result_resource_name ()}]";
        base.OnInitialized ();
    }

    public override void listener_setup ()
    {
        base.listener_setup ();


        foreach (string resource_name in this.recipe.mix_component.get_list_resource_name ())
        {
            listener_add ("BGL loc_quantity", get_loc_quantity (resource_name));
            listener_add ("BGL stock_quantity", get_stock_quantity (resource_name));
            listener_add ("BGL stack_max", get_stack_quantity_max (resource_name));
        }

        listener_add ("BGL tool", get_stack_tool ().observable_quantity);
    }


    public int get_transfer_power (string secondary_resource_name)
    {
        string complex_resource_name = 
            Resource.from_resource_name_get_complex_resource_name (
                "inserter_1", secondary_resource_name);
        return 1 + get_stack_tool (complex_resource_name).quantity;
    }


    public void give_resource (string resource_name)
    {
        Manager_Resource.resource_transfer (
            Game_Engine.self.manager_resource,
            this.generator.manager_resource,
            resource_name,
            get_transfer_power (resource_name));
    }


    public bool action_ready (string resource_name)
    {
        if (get_stock_val (resource_name) == 0)
        {
            return false;
        }

        if (get_loc_val (resource_name) == get_stack_quantity_max (resource_name) &&
            get_stack_quantity_max (resource_name) < get_loc_min (resource_name))
        {
            return false;
        }

        return true;
    }


}

