@page "/factorio"
@page "/"

@implements IDisposable
@inherits Game_Page


@using Blazora.Components
@using Blazora.Components.BGenerator

@using NS_Manager_Resource
@using NS_Game_Engine
@using NS_Blazora_Basic
@using Blazora.Script
@using System.Linq
@using System.Collections.Generic
@using NS_Game_Engine.NS_Quest
@using BlazorApp.Shared.Models
 

@code{



}

@{ 

    //Console.WriteLine ("generate Blazor Page Factorio");
}

<FPS_Counter />


<div class="noselect">

<h3>Factorio</h3>
    
    <button @onclick=@(() => Game_Setup.quickstart ()) >Quickstart</button>
    <button @onclick=@(() => { force_end (); }) >End</button>

    <br /><br />

@code{

    public async Task setup ()
    {
        if (Game_Setup.initialized == false)
        {
            await Game_Setup.setup ();
            Game_Setup.initialized = true;

            Console.WriteLine ("Page setup finished");
        }
    }


    protected override async Task OnInitializedAsync ()
    {
        Console.WriteLine ("Page OnInitializedAsync start");

        await base.OnInitializedAsync ();
        await setup ();


        Game_Setup.listener_flag_setup ();

        this.clock_second.changed += (v) => quest_update ();

        Console.WriteLine ("Page OnInitializedAsync finished");
    }


    public void quest_update ()
    {
        bool changed = Game_Engine.self.manager_quest.logical_update ();
        if (changed == true)
        {
            Game_Page.self.change_state ();
        }
    }


    public void force_end ()
    {
        Game_Engine.self.manager_quest.Values
            .Where (quest => quest.state != Quest.State.unlocked)
            .ToList ()
            .ForEach (quest => quest.state = Quest.State.unlocked);
    }


    protected override void OnInitialized ()
    {
        base.OnInitialized ();
        //Console.WriteLine ("Factorio page");

    }

}

@{ 

}


    <div style="">

        @{ 
            List<Generator> list_generator_authorized = Game_Engine.self.manager_generator.Values
                .Where (generator => 
                    Game_Engine.self.manager_quest
                    .from_generator_is_authorized (generator) == true)
                .ToList ();
        }

        @foreach (Generator generator_authorized in list_generator_authorized)
        {
            <CascadingValue Value=generator_authorized.id >
                <BGenerator />
            </CascadingValue>

            <div><br /></div>
        }

        @{ 
            List<Quest> list_quest_finished = Game_Engine.self.manager_quest.Values
                .Where (quest => quest.state == Quest.State.finished || 
                        quest.state == Quest.State.started)
                .ToList ();


        }

        @foreach (Quest quest_finished in list_quest_finished)
        {
            <Quest_Info quest=@(quest_finished) />
                
            <div><br /></div>
            <div><br /></div>
           
        }

        @{ 
            List<Quest> list_quest_unknown = Game_Engine.self.manager_quest.Values
                .Where (quest => quest.state == Quest.State.unknown)
                .ToList ();

        }
        
        @if (Game_Engine.self.manager_quest.Values.Count > 0 &&
            list_quest_finished.Count == 0 && 
            list_quest_unknown.Count == 0)
        {
            <Ending_Panel />
        }
        
            <div><br /></div>
            <div><br /></div>


    </div>
</div>



@code{

    public static void listener_stat_display ()
    {

        foreach (string resource_name in Resource.list_resource_name)
        {
            ObservableProperty<int> obs = Game_Engine.self.manager_resource.from_resource_name_get_resource_stack (resource_name).observable_quantity;
            Console.WriteLine ($"Game Engine [{obs.id}]{resource_name} listener : {obs.get_listener_count ()}");
        }


        foreach (string resource_name in Resource.list_resource_name)
        {
            ObservableProperty<int> obs = Resource.from_resource_name_get_stack_resource_quantity_max (resource_name);
            Console.WriteLine ($"Resource quantity max [{obs.id}]{resource_name} listener : {obs.get_listener_count ()}");
        }

        Generator generator =
            Game_Engine.self.manager_generator.Values.FirstOrDefault (generator => generator.get_result_resource_name () == "iron_ore");
        foreach (string resource_name in Resource.list_resource_name)
        {
            if (generator.manager_resource.from_resource_name_contain_resource_stack (resource_name) == false)
            {
                continue;
            }
            ObservableProperty<int> obs = generator.manager_resource.from_resource_name_get_resource_stack (resource_name).observable_quantity;
            Console.WriteLine ($"Generator iron_ore [{obs.id}]{resource_name} listener : {obs.get_listener_count ()}");
        }
    }



    public override void Dispose ()
    {
        base.Dispose ();

        foreach (ObservableProperty<int> observable in Resource.dico_resource_name_plus_stack_resource_quantity_max.Values)
        {
            observable.changed = null;
        }

        Game_Engine.self.manager_resource.listener_clear ();

        //Console.WriteLine ($"iron ore listener : {Game_Engine.self.manager_resource.from_resource_name_get_resource_stack ("iron_ore").observable_quantity.get_listener_count ()}");
    }

}