@page "/factorio"
@page "/"

@implements IDisposable
@inherits Game_Page


@using Blazora.Components

@using NS_Manager_Resource
@using NS_Game_Engine
@using NS_Blazora_Basic
@using Blazora.Scripts

@code{

}

@{ 

    Console.WriteLine ("generate Blazor Page Factorio");
}

<FPS_Counter />


<div class="noselect">

<h3>Factorio</h3>


@code{

        public async Task setup ()
        {
            if (Game_Setup.initialized == false)
            {
                await Game_Setup.setup ();
                Game_Setup.initialized = true;
            }
        }


    protected override async Task OnInitializedAsync ()
    {
        await base.OnInitializedAsync ();
        await setup ();


    }


    protected override void OnInitialized ()
    {
        base.OnInitialized ();
        Console.WriteLine ("Factorio page");

    }

}

@{ 

}




    @foreach (Generator generator in Game_Engine.self.manager_generator.Values)
    {
        <CascadingValue Value=generator.recipe >
            <BGenerator /> 
        </CascadingValue>

        <div><br /></div>
    }


</div>



@code{

    public static void listener_stat_display ()
    {
            
        foreach (string resource_name in Resource.list_resource_name)
        {
            Console.WriteLine ($"Game Engine {resource_name} listener : {Game_Engine.self.manager_resource.from_resource_name_get_resource_stack (resource_name).observable_quantity.get_listener_count ()}");
        }

    
        foreach (string resource_name in Resource.list_resource_name)
        {
            ObservableProperty<int> obs = Resource.from_resource_name_get_stack_resource_quantity_max (resource_name);
            Console.WriteLine ($"[{obs.id}] Resource quantity max {resource_name} listener : {obs.get_listener_count ()}");
        }

    }



    public override void Dispose ()
    {
        base.Dispose ();

        foreach (ObservableProperty<int> observable in Resource.dico_resource_name_plus_stack_resource_quantity_max.Values)
        {
            observable.changed = null;
        }

        Game_Engine.self.manager_resource.observable_clear ();

        Console.WriteLine ($"iron ore listener : {Game_Engine.self.manager_resource.from_resource_name_get_resource_stack ("iron_ore").observable_quantity.get_listener_count ()}");
    }

}