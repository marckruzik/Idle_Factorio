@page "/factorio"
@page "/"

@implements IDisposable
@inherits Game_Page


@using Blazora.Components

@using NS_Manager_Resource
@using NS_Game_Engine
@using NS_Blazora_Basic
@using Blazora.Scripts

@code{
        ObservableProperty<string> test = new ObservableProperty<string> ("#00FF00");

}

@{ 

}

<button @onclick=@(() => { benchmark (); }) />

<div class="noselect">

<h3>Factorio</h3>

    <span>test : @(test.Get ())</span>


@code{

    public async Task setup ()
    {
        if (Game_Setup.initialized == false)
        {
            await Game_Setup.setup ();
            Game_Setup.initialized = true;
        }
    }


    protected override async Task OnInitializedAsync ()
    {
        await base.OnInitializedAsync ();
        test.changed += (v) => { Console.WriteLine (v); };
        await setup ();
    }


    public void benchmark ()
    {
        System.Diagnostics.Stopwatch s = new System.Diagnostics.Stopwatch ();
        s.Start ();
        long ta;
        int loop = 100000;

        ta = s.ElapsedMilliseconds;
        int a = 0;
        for (int i=0; i<loop; i++)
        {
            int v = 0;
        }
        Console.WriteLine ($"test 1: {s.ElapsedMilliseconds-ta}");

        ta = s.ElapsedMilliseconds;
        ObservableProperty<int> b = new ObservableProperty<int> (0);
        for (int i=0; i<loop; i++)
        {
            int v = b;
        }
        Console.WriteLine ($"test 2: {s.ElapsedMilliseconds-ta}");

        ta = s.ElapsedMilliseconds;
        ObservableProperty<int> c = new ObservableProperty<int> (0);
        for (int i=0; i<loop; i++)
        {
            int v = c.Value;
        }
        Console.WriteLine ($"test 3: {s.ElapsedMilliseconds-ta}");
    }


}



@{ 



}




    @foreach (Generator generator in Game_Engine.self.manager_generator.Values)
    {
        <CascadingValue Value=generator.recipe IsFixed="true">
            <BGenerator /> 
        </CascadingValue>

        <div><br /></div>
    }


</div>



@code{

    public override void Dispose ()
    {
        base.Dispose ();
        foreach (ObservableProperty<int> observable in Resource.dico_resource_name_plus_stack_resource_quantity_max.Values)
        {
            observable.changed = null;
        }

        Game_Engine.self.manager_resource.observable_clear ();
    }

}