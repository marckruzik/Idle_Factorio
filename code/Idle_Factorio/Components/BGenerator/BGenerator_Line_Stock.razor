@inherits BGenerator_Component
@using BlazorApp.Shared.Models
@using NS_Manager_Resource
@using NS_Game_Engine
@using Idle_Factorio.Script


@using Pages

@code{


}



@{ 
    display_name ();
}



@for (int i = 0; i < this.recipe.get_component_count (); i++)
{
    Resource_Stack component_stack = this.recipe.mix_component.list_resource_stack[i];

    string resource_name = component_stack.resource_name;

    string global_color;
    if (get_stock_val (resource_name) > 0)
    {
        global_color = "transparent";
    }
    else
    {
        global_color = Game_Component.color_light_red;
    }

    // Global stock
    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (resource_name))
                position=@(new Position (s * 0, s * i, s, s))
                text_bottom_right=@($"{get_stock_val (resource_name)}")
                background_color_default=@(global_color)
                />


    if (Game_Engine.self.manager_toggle.is_true ($"know_transport_belt_1") == true)
    {
        <BGenerator_Transport_Belt_1
            position=@(new Position (s * 1, s * i, s, s))
            main_resource_name=@("transport_belt_1")
            secondary_resource_name=@(resource_name)
            parent=this
            />
    }
    

    if (Game_Engine.self.manager_toggle.is_true ($"know_inserter_1") == true)
    {
        <BGenerator_Inserter_1
            position=@(new Position (s * 2, s * i, s, s))
            main_resource_name=@("inserter_1")
            secondary_resource_name=@(resource_name)
            parent=this
            />
    }
    

    string local_color;
    if (get_loc_val (resource_name) >= get_loc_min (resource_name))
    {
        local_color = Game_Component.color_light_blue;
    }
    else
    {
        local_color = Game_Component.color_light_orange;
    }

    <Cellicon picture_filename=@(Resource.from_resource_name_get_resource_filename (resource_name))
                position=@(new Position (s * 3, s * i, s, s))
                action=@(() =>
                         {
                             Console.WriteLine ($"{resource_name}_in_tool_kind");
                             give_resource (resource_name, true);
                         })
                text_bottom_right=@($"{get_loc_val (resource_name)}")
                background_color_authorized=@(local_color)
                parent=this
              />

    <Cellicon 
                position=@(new Position (s * 4, s * i, s, s))
                text_bottom_left=@($"/{get_loc_min (resource_name)}")
                parent=this
              />

}


@{



}


@code{


    protected override void OnInitialized ()
    {
        this.id = $"Line_Stock [{this.recipe.get_first_result_resource_name ()}]";
        base.OnInitialized ();
    }

    public override void listener_setup ()
    {
        base.listener_setup ();


        foreach (string resource_name in this.recipe.mix_component.get_list_resource_name ())
        {
            listener_add ("BGL loc_quantity", get_loc_quantity (resource_name));
            listener_add ("BGL stock_quantity", get_stock_quantity (resource_name));
            //listener_add ("BGL stack_max", get_stack_quantity_max (resource_name));
        }

        listener_add ("BGL tool", get_stack_tool ().observable_quantity);
    }


    public int get_transfer_power (string secondary_resource_name)
    {
        string complex_resource_name =
            Resource.from_resource_name_get_complex_resource_name (
                "inserter_1", secondary_resource_name);
        return 1 + get_stack_tool (complex_resource_name).quantity;
    }


    public void give_resource (string resource_name, bool force_give)
    {
        int quantity = get_transfer_power (resource_name);
        if (force_give == false)
        {
            int quantity_source = Game_Engine.self.manager_resource.from_resource_name_get_resource_quantity (resource_name);
            int quantity_destination = this.generator.manager_resource.from_resource_name_get_resource_quantity (resource_name);
            if (quantity_source <= quantity_destination)
            {
                return;
            }
            if (quantity_source - quantity < quantity_destination + quantity)
            {
                quantity = (int)Math.Ceiling((quantity_source - quantity_destination) / 2.0f);
            }
        }

        Manager_Resource.resource_transfer (
            Game_Engine.self.manager_resource,
            this.generator.manager_resource,
            resource_name,
            quantity);
    }


    public bool action_ready (string resource_name)
    {
        if (get_stock_val (resource_name) == 0)
        {
            return false;
        }
        /*
        if (get_loc_val (resource_name) == get_stack_quantity_max (resource_name) &&
            get_stack_quantity_max (resource_name) < get_loc_min (resource_name))
        {
            return false;
        }
        */
        return true;
    }


}

